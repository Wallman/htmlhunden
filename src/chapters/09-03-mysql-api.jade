h2 MySQL PHP API
p.lead Nu är det dags att knyta ihop säcken lite och diskutera hur vi kan använda <code>php</code> för att arbeta emot en <code>mysql</code>-databas. Vi ska alltså prata om det <a href="http://en.wikipedia.org/wiki/Application_programming_interface">API</a> som <code>php</code> erbjuder för att intergagera med <code>MySQL</code>.

p Om det inte redan är självklart varför vi skulle vilja göra detta &mdash; låt oss iterera. Om vi ifrån vår <code>php</code>-applikation kan koppla till en <code>mysql</code>-databas så innebär detta att vi kan spara och förändra data i databasen. Självklart är detta essentiellt! Helt plötsligt har vi möjlighet att t.ex. skapa användarkonton. Genom att lagra e-post-adresser tillsammans med lösenord. Och när användare sedan ska logga in så jämför vi bara de uppgifter vi får ifrån användaren med de som finns i databasen. Om uppgifterna stämmer med någon användare så kan vi logga in personen. Men du har som sagt säkert redan förstått varför detta är viktigt, så låt oss övergå till hur vi ifrån <code>php</code> kan använda oss utav <code>mysql</code>.


h3 Ett gammalt API och ett nytt med dubbel syntax
p Efter några sökningar på nätet kommer du att märka att när vi letar resurser relaterade till det <code>API</code> som <code>php</code> erbjuder oss för att interagera med <code>mysql</code> &mdash; så hittar vi inte bara en syntax. Istället hittar vi minst tre. Är vi riktigt noga så hittar vi fyra. För att undvika förvirring när du sedan letar information på egen hand så ska vi först bara bena ut vad alla dessa olika syntaxer är och handlar om.

p Först fanns ett API som hette <a href="http://www.php.net/manual/en/book.mysql.php">mysql</a>. Detta finns och fungerar fortfarande. Men <a href="http://www.w3schools.com/php/php_ref_mysqli.asp">med php 5.0.0</a> så kom ett nytt <code>api</code> vid namn <a href="http://www.php.net/manual/en/book.mysqli.php">mysqli</a>. I essens så är detta helt enkelt en uppdaterad version av <code>mysql</code> och det extra "i":et på slutet står för "improved". Således finns det idag egentligen ingen anledning att använda det gamla <code>mysql</code>-api:et när det finns ett nyare. När du surfar omkring i nätdjungeln så kan du lätt avgöra om en metod tillhör det gamla eller det nya api:et genom att helt enkelt läsa namnet på metoden. Alla de gamla metoderna innehåller termen <code>mysql</code>, medan alla de nya innehåller <code>mysqli</code>. Lätt som en plätt! Vi kommer således endast att fokusera på det nyare <code>mysqli</code>.

p Men vi nämnde ju att det fanns tre, och t.o.m. fyra olika API:er. Låt oss förklara. Kanske kommer du ihåg ifrån <code>php</code>-kapitlet att vi diskuterade hur <code>php</code> inte var objektorienterat ifrån början? Men hur det successivt håller på att utvecklas till att stödja mer och mer objektorienterad syntax. Så är det iallafall. Och det speglar även av sig här.

p Det äldre api:et, alltså <code>mysql</code>, är helt procedurellt, och stödjer ingen objektorienterad syntax. Det nyare <code>mysqli</code> stödjer däremot två olika syntaxer. Först en procedurell syntax (som påminner otroligt mycket om det gamla api:et). Men sedan stödjer det även en objektorienterad syntax.

p Eftersom vi på htmlhunden subjektivt tror på objektorientering skulle vi vilja slå ett starkt slag för att du redan ifrån början vänjer dig vid att använda den objektorienterade syntaxen. Men vi kommer att redogöra för båda två i detta kapitel.

p Men vad hände med den fjärde syntaxen då? Jo, det finns ett sätt till. Med <code>php 5</code> så introducerades även någonging som heter <a href="http://en.wikipedia.org/wiki/PHP_Data_Objects">PDO (PHP Data Objects)</a> som i essens är ett abstraktionslager emellan databasen och applikationskoden. För att hålla det så enkelt som möjligt så kommer vi inte att kika någonting på <code>PDO</code> i detta kapitel, men däremot kommer vi att titta lite på att bygga vårt eget abstraktionslager för en databas, i ett kommande kapitel :)

