h2 Komma igång
p.lead Låt oss innan vi går vidare iterera på poängen att <code>php</code> självklart inte är det enda server-side-språket. Det finns otaliga andra &mdash;
  a(href="http://en.wikipedia.org/wiki/Ruby_(programming_language)") Ruby
  |, 
  a(href="http://en.wikipedia.org/wiki/Python_(programming_language)") Python
  |, 
  a(href="http://en.wikipedia.org/wiki/ASP.NET") ASP.NET
  |, o.s.v. Här på htmlhunden så har vi valt att använda <code>php</code> som språk för att exemplifiera och diskutera. Men försök komma ihåg att server-side-språk i grund och botten har många likheter och gör ungefär samma sak. Så om du väl har lärt dig ett, så kommer du ha lättare att komma "up to speed" med ett annat.

p Anledningen till att vi har valt just <code>php</code> är att det är ett språk som är <a href="http://en.wikipedia.org/wiki/Type_system#Dynamic_type-checking_and_runtime_type_information">dynamiskt typat</a> och inte syntantiskt fullkomligt olika ifrån språk som <a href="http://en.wikipedia.org/wiki/Java_(programming_language)">Java</a> och <a href="http://en.wikipedia.org/wiki/C_Sharp_(programming_language)">C#</a>. De två sistnämda är ju förstås statiskt typade språk och alltså inte dynamiskt typade språk som <code>php</code>. Men om du kommer ifrån ett språk såsom <code>Java</code> eller <code>C#</code> så kommer du iallafall känna igen många saker såsom måsvingar, parantesanvändning, nyckelord såsom <code>static</code>, <code>final</code>, <code>public</code>, <code>private</code> och så vidare. Detta kan tyckas som trivialiteter men faktum är att språk som t.ex. <code>Ruby</code> bl.a. känns markant annorlunda p.g.a. andra sätt att hantera dessa nämnda trivialiteter. Så därför har vi valt att lära ut och diskutera <code>php</code>. Lita på oss, du kommer inte ha några problem att lära dig ett annat språk på egen hand senare! :)

h3 MAMP &amp; WAMP
p TODO